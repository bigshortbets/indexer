name: ci

on:
  push:

jobs:
  install-node:
    name: Install NodeJS
    runs-on: ubuntu-latest

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '20'

  check-blockchain-metadata:
    name: Check if metadata are in sync with blockchain
    needs: install-node
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install substrate metadata explorer
        run: npm install -g @subsquid/substrate-metadata-explorer

      - name: Check metadata
        env:
          BLOCKCHAIN_NODE_RPC: ${{ secrets.BLOCKCHAIN_NODE_RPC }}
        run: squid-substrate-metadata-explorer --rpc $BLOCKCHAIN_NODE_RPC --out types.jsonl

      - name: Check if metadata requires update
        run: git diff --exit-code types.jsonl

  build-project:
    name: Build project and check associated generation steps
    needs: install-node
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install sqd toolset
        run: npm install -g @subsquid/cli@latest

      - name: Install typeorm-codegen
        run: npm install @subsquid/typeorm-codegen --save-dev

      - name: Execute typegen
        run: sqd typegen

      - name: Check if sqd typegen needs to be executed locally
        run: git diff --exit-code src/types

      - name: Execute codegen
        run: sqd codegen

      - name: Check if sqd codegen needs to be executed locally
        run: git diff --exit-code src/model/generated

      - name: Start PostgreSQL database
        run: sqd up

      - name: Build project
        run: sqd build

      - name: Apply migrations
        run: sqd migration:apply

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Run processor
      #   run: sqd process

      # - name: Serve graphql
      #   run: sqd serve
